<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="yarpmanifest.xsl"?>

<module>
    <name>vFramer</name>
    <doxygen-group>processing</doxygen-group>
    <description>Converts an event stream to an image</description>
    <copypolicy>Released under the terms of the GNU GPL v2.0</copypolicy>
    <version>1.0</version>

    <description-long>
        Multiple "drawers" exist to visualise the event-stream in different ways and for different event types.
    </description-long>

    <arguments>
        <param desc="Specifies the stem name of ports created by the module." default="/vFramer"> name </param>
        <param desc="Number of pixels on the y-axis of the sensor." default="240"> height </param>
        <param desc="Number of pixels on the x-axis of the sensor." default="304"> width </param>
        <param desc="Size in seconds of the temporal window for displayed events." default="0.1"> eventWindow </param>
        <param desc="Output frame rate expressed in Hz" default="20"> frameRate</param>
        <param
                desc="Channel [int] , port name [string] and 'drawer' type [list] to use for display. Provided as a ordered list. Multiple displays allowed.
                Available drawer types:
                    - AE : Address Event. Draws events with their polarity
                    - ISO : Allows visualization of past events in the 3D space spanned by x, y and time.
                    - AE-INT : Address Event of interest. Highlights an event making it red
                    - CLE : Cluster Event. Draws an ellipse on top of a cluster of events
                    - BLOB : Draws low-pass filtered image. Useful for calibration
                    - FLOW : Visualize flow events with arrows."
               default="(0 /Left AE 1 /Right AE)"> displays </param>
        <switch desc="Flips the image " default="True"> flip </switch>
    </arguments>

    <authors>
        <author email="arren.glover@iit.it"> Arren Glover </author>
    </authors>

    <data>
        <input>
            <type>vBottle</type>
            <port carrier="tcp">/vFramer/vBottle:i</port>
            <description>
                Input event stream to be displayed
            </description>
        </input>

        <output>
            <type> <![CDATA[yarp::sig::ImageOf<yarp::sig::PixelBgr>]]> ></type>
            <port carrier="tcp">/<![CDATA[<port_name>]]>/vBottle:o</port>
            <description>
                Output image. The module creates as many ports, with the corresponding <![CDATA[<port_name>]]>, as
                specified within the displays parameter.
            </description>
        </output>
    </data>
</module>
