#:import np numpy
#:import os os
#:import plt matplotlib.pyplot
#:import math math
<ConfigLabel@Label>
    size_hint_x: .8
<ConfigSwitch@Switch>
    size_hint: .8, .3
    active: True
<ConfigSlider@Slider>
    size_hint: .2, .3
    orientation: 'vertical'

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"

        FileChooserListView:
            id: filechooser
            path: "~" #root.load_path
        Label:
            text: filechooser.path
        BoxLayout:
            size_hint_y: None
            height: 30
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Load"
                on_release: root.load(filechooser.path, filechooser.selection)

<WarningPopup>
    title: "WARNING"
    size_hint: .5, .5
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.label_text
        Button:
            text: "OK"
            size_hint: .5, .2
            pos_hint: {'center_x': .5, 'center_y': .5}
            on_press: root.dismiss()

<TextInputPopup>
    title: root.label_text
    size_hint: .5, .5
    text: text_input.text
    auto_dismiss: False
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: root.label_text
        TextInput:
            id: text_input
            size_hint_y: None
            height: 30
            multiline: False
        Button:
            text: "OK"
            on_press: root.dismiss()

<ViewerDvs@Viewer>
    id: viewer
    label: 'no data'
    image: image
    polarised: polarised.active
    contrast: contrast.value
    flipHoriz: flipHoriz.active
    flipVert: flipVert.active
    on_flipHoriz: root.update_data(self.data)
    on_flipVert: root.update_data(self.data)
    on_contrast: self.get_frame(self.parent.time_value, self.parent.time_window)
    on_polarised: self.get_frame(self.parent.time_value, self.parent.time_window)
    orientation: 'vertical'
    Image:
        id: image
        allow_stretch: True
    Label:
        text: viewer.label
        size_hint: 1, 0.07
    BoxLayout:
        size_hint: 1, 0.07
        orientation: 'horizontal'
        Label:
            text: 'flip horiz'
        CheckBox:
            id: flipHoriz 
        Label:
            text: 'flip vert'
        CheckBox:
            id: flipVert 
    BoxLayout:
        size_hint: 1, 0.07
        orientation: 'horizontal'
        Label:
            text: 'polarised'
        CheckBox: 
            id: polarised
            active: True
        Label:
            text: 'contrast'
        Slider:
            id: contrast
            min: 1
            max: 20
            step: 1
            value: 3

<ViewerFrame@Viewer>
    id: viewer
    label: 'no data'
    image: image
    flipHoriz: flipHoriz.active
    flipVert: flipVert.active
    on_flipHoriz: root.update_data(self.data)
    on_flipVert: root.update_data(self.data)
    orientation: 'vertical'
    Image:
        id: image
        allow_stretch: True
    Label:
        text: viewer.label        
        size_hint: 1, 0.1
    BoxLayout:
        size_hint: 1, 0.1
        orientation: 'horizontal'
        Label:
            text: 'flip horiz'
        CheckBox:
            id: flipHoriz 
        Label:
            text: 'flip vert'
        CheckBox:
            id: flipVert 

<ViewerPose6q@Viewer>
    id: viewer
    label: 'no data'
    image: image
    flipHoriz: False
    flipVert: False
    interpolate: interpolate.active
    perspective: perspective.active
    on_interpolate: root.update_data(self.data)
    on_perspective: root.update_data(self.data)
    Image:
        id: image
        allow_stretch: True
    Label:
        size_hint: 1, 0.1
        text: viewer.label        
    BoxLayout:
        size_hint: 1, 0.1
        orientation: 'horizontal'
        Label:
            text: 'interpolate'
        CheckBox:
            id: interpolate 
            active: True
        Label:
            text: 'perspective'
        CheckBox:
            id: perspective
            active: True

<ControlButton@ButtonBehavior+Image>

<RootWidget>
    orientation:'horizontal'
    data_controller: data_controller
    BoxLayout:
        orientation: 'vertical'
        size_hint: .15, 1
        spacing: 20
        padding: 10
        canvas:
            Color:
                rgb: 1., 0., 0.
            Rectangle:
                pos: self.x + self.width, self.y
                size: 1, self.height
        Image:
            id: logo
            source: 'graphics/IIT-EDR-logo-t1.png'
            size_hint_y: .2
        GridLayout:
            cols: 2
            id: config
            ConfigLabel:
                text: 'Speed:\n1/{}x'.format(speed_slider.div_value)
            ConfigSlider:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: speed_slider
                min: 1
                max: 64
                step: 1
                value: 4
                div_value: speed_slider.value/4
            ConfigLabel:
                text: 'Temporal\nwindow:\n{0:.1f}ms'.format(round(tw_slider.log_value*1000, 2-int(math.floor(math.log10(abs(tw_slider.log_value*1000))))-1))
            ConfigSlider:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: tw_slider
                step: 0.01
                min: -9.210
                max: -0.693
                value: -3.507
                log_value: np.exp(tw_slider.value)
        GridLayout:
            cols: 2
            id: controls
            size_hint_y: .35
            spacing: 5
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: play_button
                text: 'PLAY/\nPAUSE'
                source: 'graphics/play_pause_off.png' if self.disabled else 'graphics/play_pause.png'
                on_press:  self.source='graphics/play_pause_off.png'; time_slider.play_pause()
                on_release:  self.source='graphics/play_pause.png';
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: stop_button
                source: 'graphics/stop_off.png' if self.disabled else 'graphics/stop.png'
                text: 'STOP'
                on_press: self.source='graphics/stop_off.png'; time_slider.stop()
                on_release:  self.source='graphics/stop.png';
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: slide_backward_button
                source: 'graphics/slide_back_off.png' if self.disabled else 'graphics/slide_back.png'
                text: '< SLIDE'
                on_press: self.source='graphics/slide_back_off.png'; time_slider.play_backward()
                on_release: self.source='graphics/slide_back.png'; time_slider.pause()
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: slide_forward_button
                source: 'graphics/slide_off.png' if self.disabled else 'graphics/slide.png'
                text: 'SLIDE >'
                on_press: self.source='graphics/slide_off.png'; time_slider.play_forward()
                on_release: self.source='graphics/slide.png'; time_slider.pause()
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: step_backward_button
                source: 'graphics/step_back_off.png' if self.disabled else 'graphics/step_back.png'
                text: '< STEP'
                on_press: self.source='graphics/step_back_off.png'; time_slider.step_backward()
                on_release:  self.source='graphics/step_back.png';
            ControlButton:
                #disabled: not hasattr(data_controller.data_dict, 'data')
                id: step_forward_button
                source: 'graphics/step_off.png' if self.disabled else 'graphics/step.png'
                text: 'STEP >'
                on_press: self.source='graphics/step_off.png'; time_slider.step_forward()
                on_release:  self.source='graphics/step.png';
        Button:
            size_hint_y : .15
            text: 'Load'
            on_release: data_controller.show_load()

    BoxLayout:
        orientation: 'vertical'
        size_hint: .9, 1
        padding: 10
        DataController:
            id: data_controller
            size_hint: 1, .9
            orientation: 'horizontal'
            file_path_and_name: ''
            time_value: time_slider.value
            on_time_value: self.update_children()
            time_window: tw_slider.log_value
            on_time_window: self.update_children()
        TimeSlider:
            #disabled: not hasattr(data_controller.data_dict, 'data')
            id: time_slider
            size_hint: 1, .03
            step: 0.001
            speed: speed_slider.div_value
            min: 0.0
            max: data_controller.ending_time
            on_max: value = 0
            time_window: tw_slider.log_value
        Label:
            size_hint: 1, .03
            text: '{0:.3f}/{1:.3f} sec'.format(time_slider.value, time_slider.max)
        Label:
            size_hint: 1, .03
            text: data_controller.file_path_and_name
